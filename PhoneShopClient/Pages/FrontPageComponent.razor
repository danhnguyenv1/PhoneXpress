@page "/test"

<div class="control">
	<div class="row">
		<div class="col-md-12">
			@if (FeaturedProductList!.Any())
			{
				<div class="control-container text-dark">
					<SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover" AnimationEffect="CarouselAnimationEffect.Slide" AutoPlay="true" ShowIndicators="true">
						<ChildContent>
							@foreach (Product product in (FeaturedProductList ?? new List<Product>())
												.OrderByDescending(_ => _.DateUploaded)
												.Take(5))
							{
								<CarouselItem>
									<figure class="img-container">
										<img src="@(string.IsNullOrEmpty(product.Base64Img) ? "default-placeholder.png" : product.Base64Img)" width="250" height="380" class="float-end" />
									</figure>
									<div class="d-flex justify-content-center">
										<div style="position:absolute; bottom:50px;">
											<div class="vstack gap-3 mb-3">
												<div>
													<p>
														<span style="font-family: 'Anton' , sans-serif; text-indent: 2px;" class="text-dark fw-bold display-2">
															@product.Name
															<sup style="font-family:'Courier New'">
																<span class="badge rounded-pill bg-primary fs-6">@(GetNewLabel(product.DateUploaded))</span>
																<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-family:sans-serif; font-size: 0.75rem; padding: 2px 6px;">
																	@((product.Quatity - 1) > 0 ? $"{product.Quatity - 1}+" : product.Quatity)
																</span>
																<span class="visually-hidden">unread messages</span>
															</sup>

														</span>
													</p>
												</div>
												<p class="text-muted fs-5 w-75" style="text-align:justify-all; font-family:Cambria">@(GetDescription(product.Description))</p>
											</div>
											<div class="hstack gap-1 d-flex justify-content-center">
												<button class="btn btnalert-secondary fw-bold" id="styleButton"><i class="fa fa-list"></i> Details</button>
												<button class="btn btn-outline-danger fw-bold" id="styleButton"><i class="fa fa-cart-plus"></i> BUY NOW</button>
											</div>
										</div>
									</div>
								</CarouselItem>
							}
						</ChildContent>
						<PreviousButtonTemplate>
							<img src="../resources/less-than.png" width="50" height="50" id="styleCursor" />
						</PreviousButtonTemplate>
						<NextButtonTemplate>
							<img src="../resources/greater-than.png" width="50" height="50" id="styleCursor" />
						</NextButtonTemplate>
						<IndicatorsTemplate>
							<div class="indicator"></div>
						</IndicatorsTemplate>
					</SfCarousel>
				</div>
			}
			else
			{
				<div class="alert alert-info">No product available</div>
			}
		</div>
	</div>
</div>

@code {
	List<Product>? FeaturedProductList = new();
	protected override async Task OnInitializedAsync()
	{
		await RetrieveFeatuedProducts();
	}

	private async Task RetrieveFeatuedProducts()
	{
		FeaturedProductList?.Clear();
		bool featured = true;
		var results = await ClientService.GetAllProducts(featured);
		if (results is null) return;

		var listProducts = results.ToList();
		foreach (var i in listProducts)
			FeaturedProductList!.Add(i);
	}

	string GetNewLabel(DateTime dateUploadted)
	{
		int maxDays = 30;
		int productDateAfterUploaded = (DateTime.Now - dateUploadted).Days;
		return productDateAfterUploaded <= maxDays ? "New" : null;
	}


	string GetDescription(string description)
	{
		if (string.IsNullOrWhiteSpace(description))
		{
			return "No description available."; // Prevent error
		}

		string appendDots = "...";
		int maxLength = 40;
		return description.Length > maxLength ? description.Substring(0, maxLength) + appendDots : description;
	}
}
