@implements IDisposable

@if (AllProducts is not null)
{
	var listData = AllProducts.Skip(SkipValue).Take(TakeValue).ToList();
	<div class="container-fluid">
		<div class="row featured__filter">
			@foreach (var item in listData!.OrderBy(_ => _.Featured))
			{
				<div class="col-lg-2 col-md-3 col-sm-6 border-success">
					<div class="featured__item" style="width:200px">
						<div class="featured__item__pic set-bg">
							<img src="@item.Base64Img" width="150" height="200" @onclick="() => ViewProductDetails(item)" style="cursor:pointer" />
						</div>
						<div class="featured__item__info">
							<div class="product-details">
								<h6 class="text-primary" @onclick="() => ViewProductDetails(item)" style="cursor:pointer">@item.Name</h6>
								<h5 class="text-danger">@item.Price.ToString("$#.##")</h5>
							</div>
							<div class="cart-icon">
								<a @onclick="() => AddToCart(item)" style="cursor:pointer"><i class="fa fa-shopping-cart text-danger"></i></a>
							</div>
						</div>
					</div>
				</div>
			}
			<div class="d-flex justify-content-center">
				<SfPager @ref="Page" PageSize="5" NumericItemsCount="4" TotalItemsCount="AllProducts.Count" ItemClick="Click">

				</SfPager>
			</div>
		</div>
	</div>
}
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>
@code {
	SfPager? Page;
	public int SkipValue;
	public int TakeValue = 6;
	[Parameter] public List<Product> AllProducts { get; set; } = new();
	[Parameter] public EventCallback<Product> HandleProductDetailsEvent { get; set; }

	protected override void OnInitialized()
	{
		messageDialogService.Action += StateHasChanged;
	}

	public void Click(PagerItemClickEventArgs args)
	{
		SkipValue = (args.CurrentPage * Page!.PageSize) - Page.PageSize;
		TakeValue = Page.PageSize;
	}


	async Task ViewProductDetails(Product viewProduct)
	{
		await HandleProductDetailsEvent.InvokeAsync(viewProduct);
	}

	private async Task AddToCart(Product model)
	{
		var (flag, message) = await CartService.AddToCart(model);
		if (flag)
			messageDialogService.messageDialog!.SetDialogValues("success", message);
		else
			messageDialogService.messageDialog!.SetDialogValues("info", message);
		messageDialogService.SetMessageDialog();
	}

	public void Dispose()
	{
		messageDialogService.Action -= StateHasChanged;
	}
}
